pipeline {
  agent { label 'jenkins-agent' }

  tools { jdk 'Java17'; maven 'Maven3' }

  environment {
    APP_NAME   = "register-app-pipeline"
    RELEASE    = "2.0.0"
    DOCKER_USER= "pooh1"
    IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    IMAGE_TAG  = "${RELEASE}-${BUILD_NUMBER}"
  }

  stages {
    stage('Cleanup Workspace') { steps { cleanWs() } }

    stage('Checkout from SCM') {
      steps {
        git branch: 'main',
            credentialsId: 'github',
            url: 'https://github.com/HashCode12/DevOps-EndtoEnd-Project'
      }
    }

    stage('Build & Test') {
      steps {
        sh 'mvn -B clean verify'
        sh 'ls -l target || true'   // see the produced artifact (jar/war)
      }
    }

    stage('SonarQube Analysis') {
      steps {
        // Use the NAME of your SonarQube server configured in Jenkins global config
        withSonarQubeEnv('Your-Sonar-Server-Name') {
          sh 'mvn -B sonar:sonar'
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build & Push Docker Image') {
      environment { REG_CREDS = 'dockerhub-credentials-id' } // <-- Jenkins credsId (user/pass)
      steps {
        script {
          // Build with tag; Dockerfile must match WAR vs JAR as above
          def img = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")

          docker.withRegistry('https://index.docker.io/v1/', REG_CREDS) {
            img.push()                  // push RELEASE tag
            img.push('latest')          // optional latest tag
          }
        }
      }
    }
  }
}
